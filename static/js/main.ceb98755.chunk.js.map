{"version":3,"sources":["TicTacToe_TimeTravel.js","index.js"],"names":["Square","props","className","onClick","onClicked","value","Board","i","this","boardState","renderSquare","React","PureComponent","getSymbolForPlayer","playerIndex","calculateWinner","a","b","c","TicTacToeGameWithTimeTravel","state","history","generateHistoryEntryFromBoard","Array","fill","currentlyViewedIndex","board","inNextPlayer","nextPlayer","index","getBoard","length","setState","viewedBoard","getViewedBoard","newBoard","slice","viewedNextPlayer","getViewedNextPlayer","concat","status","historyElements","map","entry","move","description","winner","key","handleTimeTravel","handleClick","Component","ReactDOM","render","document","getElementById"],"mappings":"wPAuDA,SAASA,EAAOC,GAEf,OACC,4BACCC,UAAU,SACVC,QAASF,EAAMG,WAEdH,EAAMI,O,IAMJC,E,qLAEQC,GACZ,IAAD,OACC,OAAO,kBAACP,EAAD,CACHK,MAAOG,KAAKP,MAAMQ,WAAWF,GAC7BH,UAAW,kBAAI,EAAKH,MAAME,QAAQI,Q,+BAMtC,OACC,6BACC,yBAAKL,UAAU,aACbM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEpB,yBAAKR,UAAU,aACbM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEpB,yBAAKR,UAAU,aACbM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA3BJC,IAAMC,eAuK1B,SAASC,EAAmBC,GAE3B,OAAGA,EAAc,GAAKA,EAAc,EAE5B,IAEe,IAAhBA,EAAoB,IAAM,IAGlC,SAASC,EAAgBN,GAExB,IAAKA,EAEJ,OAAO,KAeR,IAZA,IAYA,MAZc,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIR,eACA,CAAC,IAAD,sBADUO,EACV,KADaC,EACb,KADgBC,EAChB,KAIC,GAAIT,EAAWO,IACdP,EAAWO,KAAOP,EAAWQ,IAC7BR,EAAWQ,KAAOR,EAAWS,GAE7B,OAAOT,EAAWO,GAIpB,OAAO,KAGOG,M,YA/Kd,WAAYlB,GACX,IAAD,8BACC,4CAAMA,KAEDmB,MAAQ,CACZC,QAAS,CAAC,EAAKC,8BAA8BC,MAAM,GAAGC,KAAK,MAAO,IAClEC,qBAAsB,GALxB,E,2FAS8BC,EAAOC,GAEpC,MAAO,CAAClB,WAAYiB,EAAOE,WAAYD,K,+BAG/BE,GAER,OAAOrB,KAAKY,MAAMC,QAAQQ,GAAOpB,a,wCAKjC,OAAOD,KAAKsB,SAAStB,KAAKY,MAAMC,QAAQU,OAAS,K,4CAKjD,OAAOvB,KAAKY,MAAMC,QAAQb,KAAKY,MAAMK,sBAAsBG,a,uCAK3D,OAAOpB,KAAKsB,SAAStB,KAAKY,MAAMK,wB,uCAGhBI,GAEhBrB,KAAKwB,SAAS,CACbP,qBAAsBI,M,kCAKZtB,GAEX,IAAM0B,EAAczB,KAAK0B,iBAIzB,IAAID,EAAY1B,KAKZQ,EAAgBkB,GAApB,CAUA,IAAME,EAAWF,EAAYG,QACvBC,EAAmB7B,KAAK8B,sBAC9BH,EAAS5B,GAAKM,EAAmBwB,GAEjC7B,KAAKwB,SAAS,CACbX,QAASb,KAAKY,MAAMC,QAAQe,MAAM,EAAG5B,KAAKY,MAAMK,qBAAuB,GACrEc,OAAO/B,KAAKc,8BAA8Ba,GAAWE,EAAmB,GAAK,IAC/EZ,qBAAsBjB,KAAKY,MAAMK,qBAAuB,O,+BAKzD,IA2BIe,EA3BL,OACOC,EAAkBjC,KAAKY,MAAMC,QAAQqB,KAAI,SAACC,EAAOC,GAEtD,IAEIC,EAFEC,EAAS/B,EAAgB4B,EAAMlC,YAgBrC,OAXCoC,EAFGC,EAEW,WAAaA,EAEX,IAATF,EAEO,QAIA,SAAWA,EAIzB,wBAAIG,IAAKH,GACR,4BAAQzC,QAAS,kBAAM,EAAK6C,iBAAiBJ,KAAQC,OAKlDC,EAAS/B,EAAgBP,KAAK0B,kBAWpC,OAPCM,EAFGM,EAEM,WAAaA,EAIb,gBAAkBjC,EAAmBL,KAAK8B,uBAInD,yBAAKpC,UAAU,QACd,yBAAKA,UAAU,cACd,kBAAC,EAAD,CACCO,WAAYD,KAAK0B,iBACjB/B,QAAS,SAACI,GAAD,OAAO,EAAK0C,YAAY1C,OAGnC,yBAAKL,UAAU,aACd,yBAAKA,UAAU,UAAUsC,GACzB,4BAAKC,S,GA7HgC9B,IAAMuC,WC9FhDC,IAASC,OAAO,kBAAC,EAAD,MAAiCC,SAASC,eAAe,U","file":"static/js/main.ceb98755.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TicTacToe.css\"\r\n\r\n//Possible Improvements:\r\n// + Bold the currently selected item in the move list.\r\n// + Rewrite Board to use two loops to make the squares instead of hardcoding them.\r\n// + When someone wins, highlight the three squares that caused the win.\r\n// + When no one wins, display a message about the result being a draw.\r\n\r\n/*\r\n// because this component doesn't maintain its own state but is instead managed by Board,\r\n// \t\tit is considered a \"controlled component\"\r\n// ALSO: React.PureComponent only updates the component if the state or props change;\r\n// \t\tyou wouldn't want to use it for some internally-driven, animated component\r\nclass Square extends React.PureComponent \r\n{\r\n\t\r\n\t// define state in the constructor\r\n\tconstructor(props) \r\n\t{\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\thasBeenClicked: false,\r\n\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\trender() \r\n\t{\r\n\t\treturn (\r\n\t\t\t<button \r\n\t\t\t\tclassName=\"square\" \r\n\t\t\t\tonClick={function() {\r\n\t\t\t\t\t//alert('click');\r\n\t\t\t\t\t//this.setState({hasBeenClicked: true});\r\n\t\t\t\t\tthis.props.onClicked();\r\n\t\t\t\t}.bind(this)}\r\n\t\t\t>\r\n\t\t\t\t{this.props.value}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n\t\r\n\t // -- this functionality is automated in React.PureComponent\r\n\t// shouldComponentUpdate(nextProps, nextState) \r\n\t// {\r\n\t\t// if (this.props.value !== nextProps.value) {\r\n\t\t\t// return true;\r\n\t\t// }\r\n\t\t// return false;\r\n\t// }\r\n}\r\n*/\r\n// this \"function component\" is a simpler way of representing the same state-less rendering as above\r\nfunction Square(props) \r\n{\r\n\treturn (\r\n\t\t<button \r\n\t\t\tclassName=\"square\" \r\n\t\t\tonClick={props.onClicked}\r\n\t\t>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\n\r\nclass Board extends React.PureComponent \r\n{\r\n\trenderSquare(i) \r\n\t{\r\n\t\treturn <Square \r\n\t\t\t\t\t\tvalue={this.props.boardState[i]} \r\n\t\t\t\t\t\tonClicked={()=>this.props.onClick(i)}\r\n\t\t\t\t\t/>;\r\n\t}\r\n\r\n\trender() \r\n\t{\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(0)}\r\n\t\t\t\t\t{this.renderSquare(1)}\r\n\t\t\t\t\t{this.renderSquare(2)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(3)}\r\n\t\t\t\t\t{this.renderSquare(4)}\r\n\t\t\t\t\t{this.renderSquare(5)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(6)}\r\n\t\t\t\t\t{this.renderSquare(7)}\r\n\t\t\t\t\t{this.renderSquare(8)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass TicTacToeGameWithTimeTravel extends React.Component \r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\thistory: [this.generateHistoryEntryFromBoard(Array(9).fill(null), 0)],\r\n\t\t\tcurrentlyViewedIndex: 0,\r\n\t\t};\r\n\t}\r\n\t\r\n\tgenerateHistoryEntryFromBoard(board, inNextPlayer)\r\n\t{\r\n\t\treturn {boardState: board, nextPlayer: inNextPlayer};\r\n\t}\r\n\t\r\n\tgetBoard(index)\r\n\t{\r\n\t\treturn this.state.history[index].boardState;\r\n\t}\r\n\t\r\n\tgetCurrentBoard()\r\n\t{\r\n\t\treturn this.getBoard(this.state.history.length - 1);\r\n\t}\r\n\t\r\n\tgetViewedNextPlayer()\r\n\t{\r\n\t\treturn this.state.history[this.state.currentlyViewedIndex].nextPlayer;\r\n\t}\r\n\t\r\n\tgetViewedBoard()\r\n\t{\r\n\t\treturn this.getBoard(this.state.currentlyViewedIndex);\r\n\t}\r\n\t\r\n\thandleTimeTravel(index)\r\n\t{\r\n\t\tthis.setState({\r\n\t\t\tcurrentlyViewedIndex: index,\r\n\t\t});\r\n\t}\r\n\t\r\n\t// convention dictates that on[Event] from the child gets handled by handle[Event] \r\n\thandleClick(i) \r\n\t{\r\n\t\tconst viewedBoard = this.getViewedBoard();\r\n\t\t\r\n\t\t// ignore if:\r\n\t\t// the square is filled\r\n\t\tif (viewedBoard[i])\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// or the game is over\r\n\t\tif (calculateWinner(viewedBoard))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// create a copy of the array with slice(), because we like data immutability\r\n\t\t// this gets us: \r\n\t\t// \t\t- undo/redo functionality\r\n\t\t// \t\t- easy/centralized change detection\r\n\t\t// \t\t- \"pure components\", meaning we can limit the extent of our DOM refresh\r\n\t\tconst newBoard = viewedBoard.slice();\r\n\t\tconst viewedNextPlayer = this.getViewedNextPlayer();\r\n\t\tnewBoard[i] = getSymbolForPlayer(viewedNextPlayer);\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\thistory: this.state.history.slice(0, this.state.currentlyViewedIndex + 1)\r\n\t\t\t\t.concat(this.generateHistoryEntryFromBoard(newBoard, (viewedNextPlayer + 1) % 2)),\r\n\t\t\tcurrentlyViewedIndex: this.state.currentlyViewedIndex + 1,\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() \r\n\t{\r\n\t\tconst historyElements = this.state.history.map((entry, move) => \r\n\t\t{\r\n\t\t\tconst winner = calculateWinner(entry.boardState);\r\n\t\t\t\r\n\t\t\tlet description;\r\n\t\t\tif (winner)\r\n\t\t\t{\r\n\t\t\t\tdescription = \"Winner: \" + winner;\r\n\t\t\t}\r\n\t\t\telse if(move === 0)\r\n\t\t\t{\r\n\t\t\t\tdescription = \"Start\";\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdescription = \"Move: \" + move;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<li key={move}>\r\n\t\t\t\t\t<button onClick={() => this.handleTimeTravel(move)}>{description}</button>\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t});\r\n\t\t\r\n\t\tconst winner = calculateWinner(this.getViewedBoard());\r\n\t\tlet status;\r\n\t\tif (winner)\r\n\t\t{\r\n\t\t\tstatus = \"Winner: \" + winner;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstatus = \"Next player: \" + getSymbolForPlayer(this.getViewedNextPlayer());\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t\t<Board \r\n\t\t\t\t\t\tboardState={this.getViewedBoard()}\r\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t<div className=\"status\">{status}</div>\r\n\t\t\t\t\t<ol>{historyElements}</ol>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// helper functions\r\nfunction getSymbolForPlayer(playerIndex) \r\n{\r\n\tif(playerIndex < 0 || playerIndex > 1)\r\n\t{\r\n\t\treturn '?';\r\n\t}\r\n\treturn playerIndex === 0 ? 'X' : 'O';\r\n}\r\n\t\r\nfunction calculateWinner(boardState)\r\n{\r\n\tif (!boardState)\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\t\r\n\t// iterate across array and decompose tuple\r\n\tfor (let [a, b, c] of lines) //i = 0; i < lines.length; i++)\r\n\t{\r\n\t\t//const [a, b, c] = lines[i];\r\n\t\t\r\n\t\t// check if they are all the same and also not null\r\n\t\tif (boardState[a] && \r\n\t\t\tboardState[a] === boardState[b] &&\r\n\t\t\tboardState[b] === boardState[c])\r\n\t\t{\r\n\t\t\treturn boardState[a];\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn null;\r\n}\r\n\r\nexport default TicTacToeGameWithTimeTravel;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//import TicTacToeGame from './TicTacToe'\nimport TicTacToeGameWithTimeTravel from './TicTacToe_TimeTravel'\n\n\nReactDOM.render(<TicTacToeGameWithTimeTravel />, document.getElementById('root'));\n\n// import * as serviceWorker from './serviceWorker';\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}